<?php
// üîê –í–ü–ò–®–ò –°–Æ–î–ê –°–í–û–ò –ö–õ–Æ–ß–ò:
$openai_key = '—Ç–≤–æ–π_–∫–ª—é—á_OpenAI';
$leonardo_key = '—Ç–≤–æ–π_–∫–ª—é—á_LeonardoAI';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É—Å–ª—É–≥–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$text = $_POST['text'] ?? '';

if (empty($text)) {
    echo "–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π";
    exit;
}

// –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è Leonardo AI –æ—Ç GPT
$promptRequest = [
    "model" => "gpt-4",
    "messages" => [
        ["role" => "system", "content" => "You are a prompt generator for image AI."],
        ["role" => "user", "content" => "Create a detailed prompt for Leonardo AI to generate an image based on this service: \"$text\""]
    ]
];

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
$gptResponse = sendRequestToGPT($openai_key, $promptRequest);
$prompt = $gptResponse['choices'][0]['message']['content'] ?? null;

if (!$prompt) {
    echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º—Ç –æ—Ç GPT.";
    exit;
}

// –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º—Ç –≤ Leonardo –∏ –ø–æ–ª—É—á–∞–µ–º ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
$imageGenerationId = sendRequestToLeonardo($leonardo_key, $prompt);

if (!$imageGenerationId) {
    echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.";
    exit;
}

// –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
$imageUrl = pollLeonardoForImage($leonardo_key, $imageGenerationId);

if ($imageUrl) {
    echo "<h2>–ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h2><img src='$imageUrl' style='max-width: 100%;'>";
} else {
    echo "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
}


// ---------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------------

function sendRequestToGPT($key, $payload) {
    $ch = curl_init('https://api.openai.com/v1/chat/completions');
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HTTPHEADER => [
            "Authorization: Bearer $key",
            "Content-Type: application/json"
        ],
        CURLOPT_POSTFIELDS => json_encode($payload)
    ]);
    $result = curl_exec($ch);

    if (curl_errno($ch)) {
        echo "CURL –æ—à–∏–±–∫–∞: " . curl_error($ch);
        exit;
    }

    curl_close($ch);

    $decoded = json_decode($result, true);

    if (!$decoded) {
        echo "–û—à–∏–±–∫–∞ JSON –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $result";
        exit;
    }

    return $decoded;
}

function sendRequestToLeonardo($key, $prompt) {
    $ch = curl_init('https://cloud.leonardo.ai/api/rest/v1/generations');
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HTTPHEADER => [
            "Authorization: Bearer $key",
            "Content-Type: application/json"
        ],
        CURLOPT_POSTFIELDS => json_encode([
            "prompt" => $prompt,
            "modelId" => "e1a5f06f-3f94-4c25-8b7f-5fa4e6c19d9b",
            "width" => 512,
            "height" => 512,
            "num_images" => 1
        ])
    ]);
    $result = curl_exec($ch);
    curl_close($ch);

    $data = json_decode($result, true);
    return $data['sdGenerationJob']['generationId'] ?? null;
}

function pollLeonardoForImage($key, $generationId) {
    sleep(10); // –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –µ—Å–ª–∏ –Ω–∞–¥–æ)

    $url = "https://cloud.leonardo.ai/api/rest/v1/generations/$generationId";
    $ch = curl_init($url);
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HTTPHEADER => [
            "Authorization: Bearer $key"
        ]
    ]);
    $result = curl_exec($ch);
    curl_close($ch);

    $data = json_decode($result, true);
    return $data['generations_by_pk']['generated_images'][0]['url'] ?? null;
}
